/*
google 内部的“标准”编程语言

c++ ：必须有性能保障的部分，如搜索引擎、
java：复杂的业务逻辑，如 adwords，google docs、 等产品
python: 大量的内部工具
go：新的内部工具，以及其他业务模块，如 dl.google.com

# Go语言的设计初衷

对比 C/C++

	.如果有一门语言，有像 C/C++ 那样的性能，而且可以做系统开发
	.但是又没有像 C/C++ 的繁琐的系统类型，有简单统一化的模块依赖管理，编译速度飞快那就太好了

对比 Java

	.如果有一门语言，像 Java 那样拥有垃圾回收
	.但是不要像 Java 那样慢(垃圾回收对业务的影响比较大)，要对业务的影响更小

对比 Python

	.如果有一门语言，像 Python 那样简单易学，拥有灵活的类型，支持函数式编程，异步IO。
	.但是 Python 是解释器，因此它一定是慢的，而且 Python 没有静态的类型检查，项目一旦大了，参数传来传去都不知道参数里面是什么东西。
	 因此我们需要有编译器进行静态类型检查

如果有一门语言，针对上述痛点进行设计，并加入并发编程，Go 语言就是为解决这些痛点而诞生的

Go 语言的设计哲学

	Less is more ；少既是多的设计哲学

Go 语言的归类

	.类型检查：编译时
	.运行环境：编译成机器代码直接运行，它没有像 Java 虚拟机这种东西。编译完成随便扔到那台机器上都能跑
	.编程范式：面向接口，函数式编程，并发编程

Go 语言并发编程

	.采用 CSP 并发编程模型。
	.和传统的并发编程相比，CSP 并发编程模型不需要锁，不需要 callback。
	 当然了它底层还是有 lock 还是有 callback 的，只是我们在写程序的时候就不必关注这些东西了。
	.并发编程 vs 并行计算 ，并发编程包括并行计算和分布式。
	 并行计算比较简单，有个很明确的任务，我们把任务分到各个节点上去做，做完以后再去合并一下。
	 分布式比较复杂，它没有具体的这样的一个流程，有很多人互相的等来等去，相互传递消息。go语言是为并发编程设计的。

go install 安装一个 go 程序，命令必须使用在和安装文件同目录
必须和 helloworld.go 同级目录下
go run filename.go 运行 go 程序
go build helloworld.go 编译 go 程序
*/
package main

import "fmt"

func main() {
	fmt.Println("hello world")
}
